import pandas as pd

configfile: "config/config.yaml"

samples = pd.read_csv(config["samples"], sep = "\t").set_index("sample", drop=False)

def get_path(wildcards):
    return samples.loc[wildcards.sample, 'path']


rule all:
	input:
			sniffles="results/sniffles/patient_sniffles.vcf",
			cutesv="results/cutesv/patient_cutesv.vcf",		
			bcftools="results/bcftools/analysis.tsv"	
			
rule guppy:
	input:
			get_path
	output: 
			directory("results/guppy/{sample}")
	benchmark: 
			"benchmarks/{sample}_guppy.tsv"
	threads:
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440   
	shell:
			"resources/ont-guppy/bin/guppy_basecaller --model_file template_r9.4.1_450bps_hac.jsn --save_path {output} --input_path {input} --disable_pings -c dna_r9.4.1_450bps_fast.cfg --min_qscore 7 --recursive -x 'cuda:all' --num_callers 4 --gpu_runners_per_device 4 --chunks_per_runner 1024 --chunk_size 1000 --compress_fastq"

rule nanoplot:
	input: 
			"results/guppy/{sample}"
	output:
			directory("results/nanoplot/{sample}")
	benchmark: "benchmarks/{sample}_nanoplot.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440
	conda:
			"envs/nanoplot.yaml"   
	shell: 
			"NanoPlot --summary {input}/sequencing_summary.txt --loglength -o {output}"

rule concat_guppy:
	input: 
			gup="results/guppy/{sample}",
			nano="results/nanoplot/{sample}"
	output:
			"results/concat_guppy/{sample}_fastq.gz"
	benchmark: "benchmarks/{sample}_concat_guppy.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440     
	shell:
			"cat {input.gup}/pass/*.fastq.gz > {output}"
			

rule concat_samples:
	input:
			expand("results/concat_guppy/{sample}_fastq.gz",zip, sample=samples['sample'])

	output:
			fastq="results/concat_samples/patient_fastq.gz"
	benchmark: "benchmarks/concat_samples.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440     
	shell:
			"cat results/concat_guppy/*fastq.gz > {output}"

rule minimap2:
	input: 
			fastq="results/concat_samples/patient_fastq.gz",
			genome="resources/GRCh38.primary_assembly.genome.fa.gz"
	output:
			"results/minimap/patient.sam"
	benchmark: "benchmarks/minimap2.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440
	conda:
			"envs/minimap2.yaml"     
	shell: 
			"minimap2 -a -x map-ont {input.genome} {input.fastq} > {output}"

rule samtools_conversion_to_bam:
	input:
			"results/minimap/patient.sam"
	output:
			"results/samtools/patient.bam"
	benchmark: "benchmarks/samtools_conversion.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440
	conda:
			"envs/samtools.yaml"      
	shell:
			"samtools view -bo {output} {input}"

rule samtools_sort:
    input:
        	"results/samtools/patient.bam"
    output:
        	"results/sorted/patient.sorted.bam"
    benchmark: "benchmarks/samtools_sort.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440
	conda:
			"envs/samtools.yaml"
	shell:
			"samtools sort -o {output} {input}"

rule samtools_index:
    input:
        	"results/sorted/patient.sorted.bam"
    output:
        	"results/sorted/patient.sorted.bam.bai"
    benchmark: "benchmarks/samtools_index.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440   
	conda:
			"envs/samtools.yaml"
	shell:
        	"samtools index {input} -o {output}"
rule sniffles:
	input:
			bam="results/sorted/patient.sorted.bam",
			bai="results/sorted/patient.sorted.bam.bai",
			genome="resources/GRCh38.primary_assembly.genome.fa"
	output:
			"results/sniffles/patient_sniffles.vcf"
	conda:
			"envs/sniffles.yaml"
	benchmark: "benchmarks/sniffles.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440   
	shell:
			"sniffles --input {input.bam} --reference {input.genome} --vcf {output}"

rule cutesv:
	input:
			bam="results/sorted/patient.sorted.bam",
			gen="resources/GRCh38.primary_assembly.genome.fa",
	output:
			"results/cutesv/patient_cutesv.vcf"
	conda:
			"envs/cutesv.yaml"
	benchmark: "benchmarks/cutesv.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440   
	shell:
        	"cuteSV {input.bam} {input.gen} {output} results/"
rule bcftools:
	input:
			sniffles="results/sniffles/patient_sniffles.vcf",
			cutesv="results/cutesv/patient_cutesv.vcf",
			bash="resources/variants_analysis.sh"
	output:
			"results/bcftools/analysis.tsv"
	conda:
			"envs/bcftools.yaml"
	benchmark: "benchmarks/bcftools.tsv"
	threads: 
			8
	resources: 
			mem_mb= 32000,
			runtime= 1440   
	shell:
        	"bash {input.bash}"
